// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/google/wire"
	"go-project-template/internal/app/biz"
	foo2 "go-project-template/internal/app/biz/foo"
	"go-project-template/internal/app/data"
	"go-project-template/internal/app/data/foo"
	"go-project-template/internal/app/service"
	foo3 "go-project-template/internal/app/service/foo"
	"go-project-template/internal/pkg/application"
	"go-project-template/internal/pkg/config"
	"go-project-template/internal/pkg/database"
	"go-project-template/internal/pkg/httpServer"
	"go-project-template/internal/pkg/httpServer/middleware"
	"go-project-template/internal/pkg/logger"
)

// Injectors from wire.go:

func InitializeApp(cfg string) (*application.Application, error) {
	loggerLogger := logger.New()
	configConfig, err := config.New(cfg)
	if err != nil {
		return nil, err
	}
	databaseMain, err := database.NewMain(configConfig)
	if err != nil {
		return nil, err
	}
	repo, err := foo.New(databaseMain)
	if err != nil {
		return nil, err
	}
	biz := foo2.NewBiz(repo)
	fooFoo := foo3.New(biz)
	binding := service.NewBinding(fooFoo)
	requestLogging := middleware.NewRequestLogging(loggerLogger)
	ginMiddleware := middleware.NewGinMiddleware(requestLogging)
	router := httpServer.NewRouter(configConfig, binding, ginMiddleware)
	server := httpServer.NewServer(configConfig, router, loggerLogger)
	runner := application.NewRunner(server)
	applicationApplication := application.New(cfg, loggerLogger, runner)
	return applicationApplication, nil
}

// wire.go:

var providerSet = wire.NewSet(application.ProviderSet, config.ProviderSet, httpServer.ProviderSet, logger.ProviderSet, database.ProviderSet, service.ProviderSet, biz.ProviderSet, data.ProviderSet)
